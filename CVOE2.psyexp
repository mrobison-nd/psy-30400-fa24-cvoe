<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.2">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'name': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[3440, 1440]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="white" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="CVOE2" valType="str" updates="None" name="expName"/>
    <Param val="on Save" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="60" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="False" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="numberInstrux">
      <RoutineSettingsComponent name="numberInstrux" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="numberInstrux" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="For the upcoming trials...&amp;#10;&amp;#10;if the number is ODD press the F key; If the number is EVEN, press the J key. &amp;#10;&amp;#10;You can ignore the letters on these trials.&amp;#10;&amp;#10;Press the space bar to begin..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="letterInstrux">
      <RoutineSettingsComponent name="letterInstrux" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="letterInstrux" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_3" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="For the upcoming trials...&amp;#10;&amp;#10;if the letter is a CONSONANT, press the F key; if the letter is a VOWEL, press the J key. &amp;#10;&amp;#10;You can ignore the numbers on these trials.&amp;#10;&amp;#10;Press the space bar to begin..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="realInstrux">
      <RoutineSettingsComponent name="realInstrux" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="realInstrux" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_4" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="For the remaining trials, you will do the task you just did. Both speed and accuracy are important.&amp;#10;&amp;#10;When the number/letter combination is on the TOP ROW, you will make a decision about the NUMBER.&amp;#10;&amp;#10;When the combination is on the BOTTOM ROW, you will make a decision about the LETTER.&amp;#10;&amp;#10;The keys are the same: F for consonant or odd, J for vowel or even.&amp;#10;&amp;#10;Press the spacebar to begin..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="exitRoutine">
      <RoutineSettingsComponent name="exitRoutine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="exitRoutine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_5" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please wait while we save your data...." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// Disable downloading results to browser&amp;#10;psychoJS._saveResults = 0; &amp;#10;&amp;#10;// Generate filename for results&amp;#10;let filename = psychoJS._experiment._experimentName + '_' + psychoJS._experiment._datetime + '.csv';&amp;#10;&amp;#10;// Extract data object from experiment&amp;#10;let dataObj = psychoJS._experiment._trialsData;&amp;#10;&amp;#10;// Convert data object to CSV&amp;#10;let data = [Object.keys(dataObj[0])].concat(dataObj).map(it =&gt; {&amp;#10;    return Object.values(it).toString()&amp;#10;}).join('\n')&amp;#10;&amp;#10;// Send data to OSF via DataPipe&amp;#10;console.log('Saving data...');&amp;#10;fetch('https://pipe.jspsych.org/api/data', {&amp;#10;    method: 'POST',&amp;#10;    headers: {&amp;#10;        'Content-Type': 'application/json',&amp;#10;        Accept: '*/*',&amp;#10;    },&amp;#10;    body: JSON.stringify({&amp;#10;        experimentID: 'hyptu4FGLlUH', // ⭑ UPDATE WITH YOUR DATAPIPE EXPERIMENT ID ⭑&amp;#10;        filename: filename,&amp;#10;        data: data,&amp;#10;    }),&amp;#10;}).then(response =&gt; response.json()).then(data =&gt; {&amp;#10;    // Log response and force experiment end&amp;#10;    console.log(data);&amp;#10;    quitPsychoJS();&amp;#10;})" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions">
      <RoutineSettingsComponent name="instructions" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="line_3" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="45" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="line_4" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="135" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_6" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="On each trial of this task, you will see a number-letter combination in one of the four quadrants, like shown above.&amp;#10;&amp;#10;Soon you will see some instructions about how to respond to these. Press the spacebar to continue..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_5" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text_7" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-.1, .2)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="1" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_8" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-.2, .2)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="A" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="mixedInstrux">
      <RoutineSettingsComponent name="mixedInstrux" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="mixedInstrux" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_9" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="For the next set of trials, the task will change based on where the combination appears...&amp;#10;&amp;#10;When the number/letter combination is on the TOP ROW, you will make a decision about the NUMBER.&amp;#10;&amp;#10;When the combination is on the BOTTOM ROW, you will make a decision about the LETTER.&amp;#10;&amp;#10;The keys are the same: F for consonant or odd, J for vowel or even.&amp;#10;&amp;#10;Press the spacebar to begin..." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_6" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_6" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial_2">
      <RoutineSettingsComponent name="trial_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="line_5" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="45" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="line_6" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="135" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="letter_text_2" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Courier New" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="letter_text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="letter_location" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$letter" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="number_text_2" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Courier New" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="number_text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="number_location" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$number" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_7" plugin="None">
        <Param val="'f', 'j', 'F', 'J'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_7" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text_10" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_10" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$mapping" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trial_routine">
      <RoutineSettingsComponent name="trial_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="line" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="45" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="line_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="line_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="135" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="line" valType="str" updates="None" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="letter_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Courier New" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="letter_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="letter_location" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$letter" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="number_text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Courier New" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="number_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="number_location" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$number" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'f', 'j', 'F', 'J'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$letter_mapping" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_11" plugin="None">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_11" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, .4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$number_mapping" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions"/>
    <Routine name="numberInstrux"/>
    <LoopInitiator loopType="TrialHandler" name="number_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 5), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 1), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 6), ('letter', 'U'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 2), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'P'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 2), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 2), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 2), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 1), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 2), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 5), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 3), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 6), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.1, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 8), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.1, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = odd\n\nJ = even')]), OrderedDict([('number', 7), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.2, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = odd\n\nJ = even')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="numberPractice.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="number_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_routine"/>
    <LoopTerminator name="number_practice"/>
    <Routine name="letterInstrux"/>
    <LoopInitiator loopType="TrialHandler" name="letter_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('number', 7), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant; J = vowel')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="letterPractice.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="letter_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_routine"/>
    <LoopTerminator name="letter_practice"/>
    <Routine name="mixedInstrux"/>
    <LoopInitiator loopType="TrialHandler" name="mixed_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('number', 5), ('letter', 'U'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 2), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 4), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 4), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 5), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 1), ('letter', 'P'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 5), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 1), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 3), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 5), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 2), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 8), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')]), OrderedDict([('number', 7), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('mapping', 'F = consonant or odd\n\nJ = vowel or even')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="mixedPractice.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="mixed_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_routine"/>
    <LoopTerminator name="mixed_practice"/>
    <Routine name="realInstrux"/>
    <LoopInitiator loopType="TrialHandler" name="trial_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('number', 8), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'U'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'P'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'P'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'B'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'P'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'H'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'A'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'B'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'B'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'U'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'H'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'U'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'U'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'B'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 8), ('letter', 'E'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'E'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'A'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'I'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'U'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'E'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 2), ('letter', 'L'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'I'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'A'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 1), ('letter', 'E'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'L'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 7), ('letter', 'L'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 6), ('letter', 'L'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'A'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'j'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'U'), ('number_location', [-0.2, 0.2]), ('letter_location', [-0.1, 0.2]), ('position', 1), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 5), ('letter', 'H'), ('number_location', [0.1, 0.2]), ('letter_location', [0.2, 0.2]), ('position', 2), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 4), ('letter', 'H'), ('number_location', [0.1, -0.2]), ('letter_location', [0.2, -0.2]), ('position', 3), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')]), OrderedDict([('number', 3), ('letter', 'P'), ('number_location', [-0.2, -0.2]), ('letter_location', [-0.1, -0.2]), ('position', 4), ('corrAns', 'f'), ('number_mapping', 'F = odd; J = even'), ('letter_mapping', 'F = consonant; J = vowel')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="trialList.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trial_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_routine"/>
    <LoopTerminator name="trial_loop"/>
    <Routine name="exitRoutine"/>
  </Flow>
</PsychoPy2experiment>
